package org.poo.system;

import com.fasterxml.jackson.databind.node.ObjectNode;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.poo.io.StateWriter;
import org.poo.utils.NodeConvertable;
import org.poo.utils.ReflectionUtils;

import java.lang.reflect.Field;
import java.util.List;

public interface Transaction extends NodeConvertable, Cloneable {
    enum TransferType {
        SENT,
        RECEIVED;

        @Override
        public String toString() {
            return name().toLowerCase();
        }

    }

    Transaction clone();

    class Base implements Transaction {
        private final String description;
        private final int timestamp;

        public Base(String description, int timestamp) {
            this.description = description;
            this.timestamp = timestamp;
        }


        @Override
        public ObjectNode toNode() {
            ObjectNode root = StateWriter.getMapper().createObjectNode();

            // (won't work if the transaction doesn't directly extend Base)
            // Set super(base) class fields first
            for (Field superField : Base.class.getDeclaredFields()) {
                ReflectionUtils.addField(root, superField, this);
            }
            // Set instance class fields
            for (Field instanceField : this.getClass().getDeclaredFields()) {
                ReflectionUtils.addField(root, instanceField, this);
            }

            return root;
        }


        @Override
        public Transaction clone() {
            Transaction to = null;
            try {
                to = this.getClass().getConstructor(String.class, int.class).newInstance(this.description, this.timestamp);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }

            // Clone superclass fields
            ReflectionUtils.copyFields(this.getClass().getSuperclass().getDeclaredFields(), to.getClass().getSuperclass().getDeclaredFields(), this, to);

            // Copy instance fields
            ReflectionUtils.copyFields(this.getClass().getDeclaredFields(), to.getClass().getDeclaredFields(), this, to);

            return to;
        }

    }

    @Setter @Accessors(chain = true)
    class Transfer extends Base {
        private String senderIBAN;
        private String receiverIBAN;
        private String currency;
        private TransferType transferType;

        private double amount;

        public Transfer(String description, int timestamp) {
            super(description, timestamp);
        }

        // Need to change the amount field generated by `Base`
        // Also remove the currency field, it's included in the amount now
        @Override
        public ObjectNode toNode() {
            ObjectNode root = super.toNode();
            root.put("amount", amount + " " + currency);
            root.remove("currency");
            return root;
        }

    }
    @Setter @Accessors(chain = true)
    class Payment extends Base {
        private String commerciant;
        private double amount;

        public Payment(String description, int timestamp) {
            super(description, timestamp);
        }

    }

    @Setter @Accessors(chain = true)
    class CardOperation extends Base {
        private String account;
        private String cardHolder;
        private String card;
        
        public CardOperation(String description, int timestamp) {
            super(description, timestamp);
        }

    }

    @Setter @Accessors(chain = true)
    class SplitPayment extends Base {
        private String currency;
        private double amount;
        private List<String> involvedAccounts;

        @Getter
        private String error = null;

        public SplitPayment(String description, int timestamp) {
            super(description, timestamp);
        }

    }

}

